.dui__container {
	min-width: 0;
	width: 100%;
	margin: 0 auto;
	&--fluid {
		min-width: 0;
		max-width: 100%;
		width: 100%;
	}
	@each $name, $size in $containerSizes {
		&.dui__container--#{$name} {
			max-width: $size;
		}
	}
	@each $name, $size in $containerPaddingSizes {
		&.dui__container--px-#{$name} {
			padding: 0 $size;
		}
	}
}

@mixin flexGrid() {
	display: flex;
	align-items: flex-start;
	justify-content: flex-start;
	flex-direction: row;
	flex-wrap: wrap;

	@each $breakpointName, $breakpointSize in $breakpoints {
		@each $name, $option in $flexSpacingOptions {
			&.dui__flex--sx-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					&:not(.dui__flex--no-negative) {
						margin-left: -#{$option};
						margin-right: -#{$option};
					}
					& > .dui__flex__col {
						padding-left: $option;
						padding-right: $option;
					}
				}
			}
			&.dui__flex--sy-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					&:not(.dui__flex--no-negative) {
						margin-top: -#{$option};
						margin-bottom: -#{$option};
					}
					& > .dui__flex__col {
						padding-top: $option;
						padding-bottom: $option;
					}
				}
			}
		}
		@each $name, $option in $flexAlignOptions {
			&.dui__flex--align-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					align-items: $option;
				}
			}
		}
		@each $name, $option in $flexJustifyOptions {
			&.dui__flex--justify-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					justify-content: $option;
				}
			}
		}
		@each $name, $option in $flexDirectionOptions {
			&.dui__flex--direction-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					flex-direction: $option;
				}
			}
		}
		@each $name, $option in $flexWrapOptions {
			&.dui__flex--wrap-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					flex-wrap: $option;
				}
			}
		}
	}

	@each $name, $option in $flexSpacingOptions {
		&.dui__flex--sx-#{$name} {
			&:not(.dui__flex--no-negative) {
				margin-left: -#{$option};
				margin-right: -#{$option};
			}
			& > .dui__flex__col {
				padding-left: $option;
				padding-right: $option;
			}
		}
		&.dui__flex--sy-#{$name} {
			&:not(.dui__flex--no-negative) {
				margin-top: -#{$option};
				margin-bottom: -#{$option};
			}
			& > .dui__flex__col {
				padding-top: $option;
				padding-bottom: $option;
			}
		}
	}
	@each $name, $option in $flexAlignOptions {
		&.dui__flex--align-#{$name} {
			align-items: $option;
		}
	}
	@each $name, $option in $flexJustifyOptions {
		&.dui__flex--justify-#{$name} {
			justify-content: $option;
		}
	}
	@each $name, $option in $flexDirectionOptions {
		&.dui__flex--direction-#{$name} {
			flex-direction: $option;
		}
	}
	@each $name, $option in $flexWrapOptions {
		&.dui__flex--wrap-#{$name} {
			flex-wrap: $option;
		}
	}
}

@mixin flexGridCol() {
	box-sizing: border-box;
	flex: 1 1 auto;
	max-width: 100%;

	&--contain {
		flex: 0 0 100%;
	}

	@each $breakpointName, $breakpointSize in $breakpoints {
		@for $i from 1 through $gridColumns {
			&.dui__flex__col-#{$i} {
				flex: 0 0 $gridColumnWidth * $i;
			}
			&.dui__flex__col--offset-#{$i} {
				margin-left: $gridColumnWidth * $i;
			}
			&.dui__flex__col-#{$breakpointName}-#{$i} {
				@media all and (min-width: $breakpointSize) {
					flex: 0 0 $gridColumnWidth * $i;
				}
			}
			&.dui__flex__col--offset-#{$breakpointName}-#{$i} {
				@media all and (min-width: $breakpointSize) {
					margin-left: $gridColumnWidth * $i;
				}
			}
		}
		&.dui__flex__col--hide-#{$breakpointName} {
			@media all and (min-width: $breakpointSize) {
				display: none !important;
			}
		}
	}

	&.dui__flex__col-auto {
		flex: 0 0 auto;
	}
	&.dui__flex__col--hide {
		display: none !important;
	}
}

.dui__flex {
	@include flexGrid();

	&__col {
		@include flexGridCol();
	}
}

$axes: (
	"x": (
		"name": "x",
		"prop1": left,
		"prop2": right,
	),
	"y": (
		"name": "y",
		"prop1": top,
		"prop2": bottom,
	),
);

@mixin spacingClass($name, $dir, $sizeCode, $size, $classKey: "p", $rule: padding) {
	.#{$classKey}#{$sizeCode} {
		#{$rule}: $size;
	}

	$axesKeys: map-keys($axes);
	@each $key in $axesKeys {
		$axisName: map-deep-get($axes, $key, "name");
		$prop1: map-deep-get($axes, $key, "prop1");
		$prop2: map-deep-get($axes, $key, "prop2");
		.#{$classKey}#{$axisName}#{$sizeCode} {
			#{$rule}-#{$prop1}: $size;
			#{$rule}-#{$prop2}: $size;
		}
	}

	.#{$classKey}#{$name}#{$sizeCode} {
		#{$rule}-#{$dir}: $size;
	}
}

@each $name, $dir in $spacingDir {
	@each $sizeCode, $size in $spacingSize {
		//padding
		@include spacingClass($name, $dir, $sizeCode, $size);
		//margin
		@include spacingClass($name, $dir, $sizeCode, $size, "m", margin);
	}
}

.no-overflow {
	overflow: hidden;
}

.dui__icon {
	height: 1.15em;
	width: 1.15em;
	transform: translateY(0.15em);
}

@each $name, $shadow in $elevations {
	.dui__elevation--#{$name} {
		box-shadow: $shadow;
	}
}
