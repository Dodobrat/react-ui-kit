.dui__container {
	min-width: 0;
	width: 100%;
	margin: 0 auto;
	&--fluid {
		min-width: 0;
		max-width: 100%;
		width: 100%;
	}
	@each $name, $size in $containerSizes {
		&.dui__container--#{$name} {
			max-width: $size;
		}
	}
	@each $name, $size in $containerPaddingSizes {
		&.dui__container--px-#{$name} {
			padding: 0 $size;
		}
	}
}

//FLEX GRID UTIL CLASSES
@mixin flexGrid() {
	display: flex;
	align-items: flex-start;
	justify-content: flex-start;
	flex-direction: row;
	flex-wrap: wrap;

	@each $breakpointName, $breakpointSize in $breakpoints {
		@each $name, $option in $flexSpacingOptions {
			&.dui__flex--sx-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					&:not(.dui__flex--no-negative) {
						margin-left: -#{$option};
						margin-right: -#{$option};
					}
					& > .dui__flex__col {
						padding-left: $option;
						padding-right: $option;
					}
				}
			}
			&.dui__flex--sy-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					&:not(.dui__flex--no-negative) {
						margin-top: -#{$option};
						margin-bottom: -#{$option};
					}
					& > .dui__flex__col {
						padding-top: $option;
						padding-bottom: $option;
					}
				}
			}
		}
		@each $name, $option in $flexAlignOptions {
			&.dui__flex--align-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					align-items: $option;
				}
			}
		}
		@each $name, $option in $flexJustifyOptions {
			&.dui__flex--justify-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					justify-content: $option;
				}
			}
		}
		@each $name, $option in $flexDirectionOptions {
			&.dui__flex--direction-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					flex-direction: $option;
				}
			}
		}
		@each $name, $option in $flexWrapOptions {
			&.dui__flex--wrap-#{$breakpointName}-#{$name} {
				@media all and (min-width: $breakpointSize) {
					flex-wrap: $option;
				}
			}
		}
	}

	@each $name, $option in $flexSpacingOptions {
		&.dui__flex--sx-#{$name} {
			&:not(.dui__flex--no-negative) {
				margin-left: -#{$option};
				margin-right: -#{$option};
			}
			& > .dui__flex__col {
				padding-left: $option;
				padding-right: $option;
			}
		}
		&.dui__flex--sy-#{$name} {
			&:not(.dui__flex--no-negative) {
				margin-top: -#{$option};
				margin-bottom: -#{$option};
			}
			& > .dui__flex__col {
				padding-top: $option;
				padding-bottom: $option;
			}
		}
	}
	@each $name, $option in $flexAlignOptions {
		&.dui__flex--align-#{$name} {
			align-items: $option;
		}
	}
	@each $name, $option in $flexJustifyOptions {
		&.dui__flex--justify-#{$name} {
			justify-content: $option;
		}
	}
	@each $name, $option in $flexDirectionOptions {
		&.dui__flex--direction-#{$name} {
			flex-direction: $option;
		}
	}
	@each $name, $option in $flexWrapOptions {
		&.dui__flex--wrap-#{$name} {
			flex-wrap: $option;
		}
	}
}

@mixin flexGridCol() {
	flex: 1 1 auto;
	max-width: 100%;

	&--contain {
		flex: 0 0 100%;
	}

	@for $i from 1 through $gridColumns {
		&.dui__flex__col-#{$i} {
			flex: 0 0 $gridColumnWidth * $i;
		}
		&.dui__flex__col--offset-#{$i} {
			margin-left: $gridColumnWidth * $i;
		}
	}

	@each $breakpointName, $breakpointSize in $breakpoints {
		@for $i from 1 through $gridColumns {
			&.dui__flex__col-#{$breakpointName}-#{$i} {
				@media all and (min-width: $breakpointSize) {
					flex: 0 0 $gridColumnWidth * $i;
				}
			}
			&.dui__flex__col--offset-#{$breakpointName}-#{$i} {
				@media all and (min-width: $breakpointSize) {
					margin-left: $gridColumnWidth * $i;
				}
			}
		}
		&.dui__flex__col--hide-#{$breakpointName} {
			@media all and (min-width: $breakpointSize) {
				display: none !important;
			}
		}
	}

	&.dui__flex__col-auto {
		flex: 0 0 auto;
	}
	&.dui__flex__col--hide {
		display: none !important;
	}
}

.dui__flex {
	@include flexGrid();

	&__col {
		@include flexGridCol();
	}
}

//SPACING UTIL CLASSES
$axes: (
	"x": (
		"name": "x",
		"prop1": left,
		"prop2": right,
	),
	"y": (
		"name": "y",
		"prop1": top,
		"prop2": bottom,
	),
);

@mixin spacingClass($classKey, $name, $dir, $rule) {
	@each $sizeCode, $size in $spacingSize {
		$axesKeys: map-keys($axes);
		@each $key in $axesKeys {
			$axisName: map-deep-get($axes, $key, "name");
			$prop1: map-deep-get($axes, $key, "prop1");
			$prop2: map-deep-get($axes, $key, "prop2");
			.#{$classKey}#{$axisName}_#{$sizeCode} {
				#{$rule}-#{$prop1}: $size;
				#{$rule}-#{$prop2}: $size;
			}

			@each $breakpointName, $breakpointSize in $breakpoints {
				.#{$classKey}#{$axisName}_#{$breakpointName}_#{$sizeCode} {
					@media all and (min-width: $breakpointSize) {
						#{$rule}-#{$prop1}: $size;
						#{$rule}-#{$prop2}: $size;
					}
				}
			}
		}
	}

	@each $sizeCode, $size in $spacingSize {
		.#{$classKey}_#{$sizeCode} {
			#{$rule}: $size;
		}
	}

	@each $breakpointName, $breakpointSize in $breakpoints {
		@each $sizeCode, $size in $spacingSize {
			.#{$classKey}_#{$breakpointName}_#{$sizeCode} {
				@media all and (min-width: $breakpointSize) {
					#{$rule}: $size;
				}
			}
		}
	}

	@each $sizeCode, $size in $spacingSize {
		.#{$classKey}#{$name}_#{$sizeCode} {
			#{$rule}-#{$dir}: $size;
		}
	}

	@each $breakpointName, $breakpointSize in $breakpoints {
		@each $sizeCode, $size in $spacingSize {
			.#{$classKey}#{$name}_#{$breakpointName}_#{$sizeCode} {
				@media all and (min-width: $breakpointSize) {
					#{$rule}-#{$dir}: $size;
				}
			}
		}
	}
}

@each $name, $dir in $spacingDir {
	//padding
	@include spacingClass("p", $name, $dir, padding);
	//margin
	@include spacingClass("m", $name, $dir, margin);
}

//DISPLAY UTIL CLASSES
$display: (
	"block": block,
	"inblock": inline-block,
	"flex": flex,
	"inflex": inline-flex,
	"grid": grid,
	"ingrid": inline-grid,
	"in": inline,
	"table": table,
	"table_cell": table-cell,
	"table_row": table-cell,
	"none": none,
);

@each $name, $display in $display {
	.d#{$name} {
		display: $display;
	}
	@each $breakpointName, $breakpointSize in $breakpoints {
		.d_#{$breakpointName}_#{$name} {
			@media all and (min-width: $breakpointSize) {
				display: $display;
			}
		}
	}
}

//PIGMENT UTIL CLASSES
$pigmentKeys: map-keys($pigments);
@each $key in $pigmentKeys {
	$name: map-deep-get($pigments, $key, "name");
	$bgColor: map-deep-get($pigments, $key, "bgColor");
	$fontColor: map-deep-get($pigments, $key, "fontColor");
	.bg_#{$name} {
		background: $bgColor;
	}
	.bgtext_#{$name} {
		color: $fontColor;
	}
	.text_#{$name} {
		color: $bgColor;
	}
}

//SIZING UTIL CLASSES
$sizing: (
	"0": 0,
	"25": 25%,
	"50": 50%,
	"75": 75%,
	"100": 100%,
	"auto": auto,
);

@each $name, $size in $sizing {
	.w_#{$name} {
		width: $size;
	}
	.maxw_#{$name} {
		max-width: $size;
	}
	.h_#{$name} {
		height: $size;
	}
	@each $breakpointName, $breakpointSize in $breakpoints {
		.w_#{$breakpointName}_#{$name} {
			@media all and (min-width: $breakpointSize) {
				width: $size;
			}
		}
		.maxw_#{$breakpointName}_#{$name} {
			@media all and (min-width: $breakpointSize) {
				max-width: $size;
			}
		}
		.h_#{$breakpointName}_#{$name} {
			@media all and (min-width: $breakpointSize) {
				height: $size;
			}
		}
	}
}

//OVERFLOW HIDDEN
.no-overflow {
	overflow: hidden;
}

//RIPPLE EFFECT
@mixin ripplePigmentOptions($options: $pigments) {
	$pigmentKeys: map-keys($options);
	@each $key in $pigmentKeys {
		$name: map-deep-get($options, $key, "name");
		$bgColor: map-deep-get($options, $key, "bgColor");
		$fontColor: map-deep-get($options, $key, "fontColor");
		&.dui__ripple--#{$name} {
			background-color: rgba($fontColor, 0.5);
		}
	}
}

.dui__ripple {
	position: absolute;
	pointer-events: none;
	border-radius: 50%;
	transform: scale(0);
	animation: ripple $rippleTransTime $rippleTransEase;
	background-color: rgba($subFont, 0.2);
	@include crossBrowser(user-select, none);
	@include ripplePigmentOptions();
}

@keyframes ripple {
	to {
		transform: scale(2);
		opacity: 0;
	}
}

//ICON ADJUSTMENTS
.dui__icon {
	height: 1.15em;
	width: 1.15em;
	transform: translateY(0.15em);
}

//ELEVATIONS
@each $name, $shadow in $elevations {
	.dui__elevation--#{$name} {
		box-shadow: $shadow;
	}
}
