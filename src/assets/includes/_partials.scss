// @mixin closeLine($lineWidth) {
// 	content: "";
// 	position: absolute;
// 	left: 25%;
// 	top: 50%;
// 	width: $lineWidth;
// 	height: 0.1rem;
// 	border-radius: $smBorderRadius;
// 	background-color: rgba($mainFont, 0.65);
// }

// @mixin closeBtn($size: 1.5rem, $radius: $smBorderRadius) {
// 	position: relative;
// 	border: none;
// 	border-radius: $radius;
// 	outline: 0;
// 	padding: 0;
// 	height: $size;
// 	width: $size;
// 	background: transparent;
// 	user-select: none;

// 	&::before {
// 		@include closeLine(calc(#{$size} / 2));
// 		transform: rotate(45deg);
// 	}
// 	&::after {
// 		@include closeLine(calc(#{$size} / 2));
// 		transform: rotate(-45deg);
// 	}
// 	&:focus {
// 		box-shadow: 0 0 0 0.2rem rgba($mainFont, 0.05);
// 	}
// }

// .dui__close__btn {
// 	@include closeBtn();
// 	&--round {
// 		@include closeBtn(1.5rem, $circleBorderRadius);
// 	}
// }

// @mixin expandLine($lineWidth) {
// 	content: "";
// 	position: absolute;
// 	top: 50%;
// 	width: $lineWidth;
// 	height: 0.1rem;
// 	border-radius: $smBorderRadius;
// 	background-color: rgbaToRgb(rgba($mainFont, 0.5));
// }

// @mixin expandIndicator($active: false, $size: 1rem) {
// 	transition: transform 0.15s ease;
// 	position: relative;
// 	width: $size;
// 	height: $size;
// 	user-select: none;

// 	@if ($active) {
// 		transition: transform 0.15s ease;
// 		transform: rotateX(180deg);
// 	}

// 	&::before {
// 		@include expandLine(calc(#{$size} / 2));
// 		left: 10%;
// 		transform: rotate(45deg);
// 	}
// 	&::after {
// 		@include expandLine(calc(#{$size} / 2));
// 		left: 40%;
// 		transform: rotate(-45deg);
// 	}
// }

// .dui__expand__indicator {
// 	@include expandIndicator();
// 	&--active {
// 		@include expandIndicator(true);
// 	}
// }

// HEADING

$headingOptions: (
	"h1": clamp(3.5rem, 6.5vw, 5rem),
	"h2": clamp(3rem, 6vw, 4.5rem),
	"h3": clamp(2.5rem, 5.5vw, 4rem),
	"h4": clamp(2rem, 5vw, 3.5rem),
	"h5": clamp(1.5rem, 4.5vw, 3rem),
	"h6": clamp(1rem, 4vw, 2.5rem),
);

.dui__heading {
	font-size: clamp(1rem, 2vw, 1.5rem);
	line-height: 1.2;
	font-weight: 300;
}

@each $elem, $fontSize in $headingOptions {
	#{$elem}.dui__heading {
		font-size: $fontSize;
	}
}

.dui__text {
	font-size: clamp(0.9rem, 2.75vw, 1rem);
	line-height: 1.4;
}

// SKELETON

@mixin skeletonPigmentOptions($options: $pigments) {
	$pigmentKeys: map-keys($options);
	@each $key in $pigmentKeys {
		$name: map-deep-get($options, $key, "name");
		$bgColor: map-deep-get($options, $key, "bgColor");
		$fontColor: map-deep-get($options, $key, "fontColor");
		&.dui__skeleton--#{$name} {
			background-color: $bgColor;
			&::after {
				background-image: linear-gradient(
					90deg,
					rgba($fontColor, 0) 0,
					rgba($fontColor, 0.2) 20%,
					rgba($fontColor, 0.5) 60%,
					rgba($fontColor, 0)
				);
			}
		}
	}
}

.dui__skeleton {
	display: inline-block;
	min-width: 10rem;
	height: 1rem;
	position: relative;
	overflow: hidden;
	background-color: darken($bg, 7.5%);
	border-radius: $smBorderRadius;

	&::after {
		content: "";
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		transform: translateX(-100%);
		background-image: linear-gradient(90deg, rgba($bgCard, 0) 0, rgba($bgCard, 0.5) 20%, rgba($bgCard, 0.8) 60%, rgba($bgCard, 0));
		animation: shimmer 2s infinite;
	}

	@include skeletonPigmentOptions();
	&--contrast {
		@include skeletonPigmentOptions($contrastPigments);
	}

	&--rounded {
		border-radius: $roundedBorderRadius;
	}

	&--flat {
		border-radius: $flatBorderRadius;
	}

	@keyframes shimmer {
		100% {
			transform: translateX(100%);
		}
	}
}

// DRAGSCROLL
.indiana-scroll-container {
	&--dragging {
		* {
			user-select: none;
		}
		& > * {
			cursor: grabbing;
		}
	}
}

.indiana-dragging {
	cursor: grabbing !important;
}

@mixin dragIndicatorBg($deg) {
	background: linear-gradient(#{$deg}, rgba($bgCard, 0.975) 75%, rgba($bgCard, 0) 100%);
}

@mixin dragIndicatorPosition($position, $dir: "horizontal") {
	@if ($dir == "horizontal") {
		top: 0;
		bottom: 0;
		height: 100%;
		@if ($position == "startX") {
			left: 0;
			@include dragIndicatorBg(90deg);
		}
		@if ($position == "endX") {
			right: 0;
			@include dragIndicatorBg(270deg);
		}
	}
	@if ($dir == "vertical") {
		left: 0;
		right: 0;
		width: 100%;
		@if ($position == "startY") {
			top: 0;
			@include dragIndicatorBg(180deg);
		}
		@if ($position == "endY") {
			bottom: 0;
			@include dragIndicatorBg(0deg);
		}
	}
}

.dui__dragscroll__container {
	position: relative;
	&__indicator {
		position: absolute;
		background: $bgCard;
		display: flex;
		justify-content: center;
		align-items: center;
		cursor: pointer;
		user-select: none;
		padding: 1.625rem;
		&--startX {
			@include dragIndicatorPosition("startX");
		}
		&--endX {
			@include dragIndicatorPosition("endX");
		}
		&--startY {
			@include dragIndicatorPosition("startY", "vertical");
		}
		&--endY {
			@include dragIndicatorPosition("endY", "vertical");
		}
	}
}

// BACK TO TOP

$backTopPositions: (
	"bottom-left": (
		"name": "bottom-left",
		"bottom": 2rem,
		"left": 2rem,
		"right": unset,
		"transform": unset,
	),
	"bottom": (
		"name": "bottom",
		"bottom": 2rem,
		"left": 50%,
		"right": unset,
		"transform": translateX(-50%),
	),
	"bottom-right": (
		"name": "bottom-right",
		"bottom": 2rem,
		"left": unset,
		"right": 2rem,
		"transform": unset,
	),
);

@mixin backTopPositionOptions($options: $backTopPositions) {
	$positionKeys: map-keys($options);
	@each $key in $positionKeys {
		$name: map-deep-get($options, $key, "name");
		$bottom: map-deep-get($options, $key, "bottom");
		$left: map-deep-get($options, $key, "left");
		$right: map-deep-get($options, $key, "right");
		$transform: map-deep-get($options, $key, "transform");
		&.dui__back-top--#{$name} {
			bottom: $bottom;
			left: $left;
			right: $right;
			transform: $transform;
		}
	}
}

.dui__back-top {
	position: fixed;
	z-index: 1100;
	@include backTopPositionOptions();
}
