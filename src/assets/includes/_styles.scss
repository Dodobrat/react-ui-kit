//PIGMENTS
@mixin switchGroupShadow($outerColor: transparent) {
	box-shadow: inset 0 0 0 0.125rem rgba-to-rgb(rgba($subFont, 0.2)), 0 0 0 0.0625rem $outerColor;
}

@mixin pigmentBgStyles($background, $color) {
	background-color: $background;
	color: $color;
	&.dui__btn--focus-ring {
		&:focus {
			box-shadow: 0 0 0 0.25rem rgba($background, 0.5), 0 0 0 0.1rem rgba($color, 0.25);
		}
	}
	&.dui__btn:hover,
	&.dui__badge:hover,
	&.dui__alert:hover,
	&.filled,
	&.dui__btn--active {
		background-color: darken($background, 5%);
	}
	.dui__ripple {
		background-color: rgba($color, 0.5);
	}
	//PARTIALS
	&.dui__spinner {
		background-color: transparent;
		border-color: rgba($background, 0.25);
		border-top-color: $background;
		&.dui__spinner--component {
			border-color: rgba($color, 0.25);
			border-top-color: $color;
		}
	}
	&.dui__line-loader {
		background-color: rgba($background, 0.25);
		.dui__line-loader__line {
			background-color: $background;
		}
	}
	&.dui__skeleton {
		background-color: darken($background, 3%);
		&::after {
			background-image: linear-gradient(90deg, rgba($color, 0) 0, rgba($color, 0.25) 20%, rgba($color, 0.5) 60%, rgba($color, 0));
		}
	}
	&.dui__progressbar {
		background: transparent;
		.dui__progressbar__progress {
			background-color: $background;
			&::before {
				background-color: rgba($background, 0.25);
			}
		}
		.dui__progressbar__label {
			background-color: $background;
			color: $color;
		}
	}
	&.dui__progressring {
		background: transparent;
		& > circle {
			stroke: $background;
		}
		.dui__progressring__track {
			stroke: rgba($background, 0.25);
		}
		.dui__progressring__label {
			fill: $background;
		}
	}
	&.dui__tooltip {
		@if ($background == $bgCard) {
			background-color: $color;
			color: $background;
		} @else {
			background-color: $background;
			color: $color;
		}
		&.dui__tooltip--seamless {
			background-color: unset;
			color: unset;
		}
	}
	//INPUTS
	&.dui__input {
		&:hover {
			box-shadow: 0 0 0 0.0625rem rgba($background, 0.2);
		}
		@include focusVisible($background, $background);
		&--seamless {
			&:hover,
			&:focus,
			&:focus-visible {
				box-shadow: 0 0 0 0.0625rem rgba($background, 0.2);
			}
		}
		&[type="range"] {
			&:hover {
				@include rangeHover($background);
			}
			&:focus-visible {
				@include rangeFocusVisible($background, $background);
			}
			@include rangeThumbPigments($background, darken($background, 10%));
		}
		&.dui__input__checkable {
			&.dui__input--seamless {
				transition: none;
				background-color: transparent !important;
				&:hover,
				&:focus,
				&:focus-visible {
					box-shadow: none;
				}
			}
			.dui__input__checkable__input:checked + .dui__input__checkable__value {
				background-color: $background;
				border-color: $background;
			}
			.dui__input__checkable__input:focus-visible + .dui__input__checkable__value {
				@include focusVisibleStyles($background, $background);
			}
			.dui__input__checkbox__input:checked + .dui__input__checkbox__value {
				&::after {
					border-color: $color;
				}
			}
			.dui__input__switch__input:checked + .dui__input__switch__value {
				&::after {
					background-color: $color;
				}
			}
			.dui__input__radio__input:checked + .dui__input__radio__value {
				&::after {
					background-color: $color;
				}
			}
			&:hover {
				.dui__input__checkable__value {
					box-shadow: 0 0 0 0.125rem rgba($background, 0.2);
				}
			}
		}
		&__wrapper {
			&:hover {
				box-shadow: 0 0 0 0.0625rem rgba($background, 0.2);
			}
			&.dui__input__wrapper--focused {
				@include focusVisibleStyles($background, $background);
				&:hover {
					@include focusVisibleStyles($background, $background);
				}
				&.dui__input__wrapper--seamless {
					box-shadow: 0 0 0 0.0625rem rgba($background, 0.2);
					&:hover {
						box-shadow: 0 0 0 0.0625rem rgba($background, 0.2);
					}
				}
			}
			&.dui__input__wrapper__checkable {
				.dui__input__checkable__input:checked + .dui__input__checkable__value {
					background-color: $background;
					border-color: $background;
				}
				.dui__input__checkbox__input:checked + .dui__input__checkbox__value {
					&::after {
						border-color: $color;
					}
				}
				.dui__input__switch__input:checked + .dui__input__switch__value {
					&::after {
						background-color: $color;
					}
				}
				.dui__input__radio__input:checked + .dui__input__radio__value {
					&::after {
						background-color: $color;
					}
				}
				&:hover {
					.dui__input__checkable__value {
						box-shadow: 0 0 0 0.125rem rgba($background, 0.2);
					}
				}
				&--focused {
					.dui__input__checkable__value {
						@include focusVisibleStyles($background, $background);
					}
					&:hover {
						.dui__input__checkable__value {
							@include focusVisibleStyles($background, $background);
						}
					}
				}
			}
		}
	}
	&.dui__switch__group {
		background-color: initial;
		color: $subFont;
		@include switchGroupShadow();
		&:hover {
			@include switchGroupShadow(rgba($background, 0.5));
		}
		.dui__switch__group__indicator {
			background-color: $background;
		}
		.dui__switch__group__item {
			&--active {
				color: $color;
			}
		}
		&.dui__switch__group--seamless {
			box-shadow: none;
			&:hover {
				box-shadow: none;
			}
		}
	}
	//SURFACES
	&.dui__card {
		.dui__card__header {
			border-bottom: 0.0625rem solid rgba($color, 0.1);
		}
		.dui__card__footer {
			border-top: 0.0625rem solid rgba($color, 0.1);
		}
	}
	&.dui__collapse {
		.dui__collapse__toggle {
			&:hover {
				background-color: darken($background, 1.5%);
			}
			@include focusVisible($background, $color);
		}
	}
	&.dui__list__group {
		.dui__list__group__header {
			color: rgba($color, 0.7);
		}
		.dui__list__group__item {
			&--active {
				background-color: darken($background, 5%);
			}
			&:hover {
				background-color: darken($background, 2.5%);
			}
		}
		.dui__list__group__collapse {
			&__toggle {
				&:hover {
					background-color: darken($background, 2.5%);
				}
				@include focusVisible($background, $color);
			}
			&__content {
				border-top: 0.0625rem solid rgba($color, 0.1);
				.dui__list__group__collapse {
					&::before {
						background-color: rgba($color, 0.2);
					}
					&__content {
						border-top: none;
					}
				}
			}
		}
		& > * {
			border-bottom: 0.0625rem solid rgba($color, 0.1);
		}
	}
	&.dui__tabs {
		.dui__dragscroll__container {
			&::after {
				background-color: rgba($color, 0.1);
			}
		}
		.dui__tabs__items {
			&__item {
				@include focusVisible($background, $color);
				&[aria-selected="true"] {
					&:focus-visible {
						box-shadow: none;
					}
				}
			}
			&__indicator {
				background-color: $color;
			}
		}
	}
	&.dui__table__container {
		.dui__table {
			background-color: $background;
			color: $color;
			&__head,
			&__foot {
				.dui__table__row {
					.dui__table__header {
						color: $color;
						background-color: darken($background, 5%);
						&:hover {
							background-color: darken($background, 10%);
						}
					}
				}
			}
			&__body {
				.dui__table__row {
					&:hover {
						.dui__table__cell {
							background-color: rgba-to-rgb(rgba($color, 0.05), $background);
						}
					}
					.dui__table__cell {
						background-color: $background;

						&::before {
							background-color: rgba-to-rgb(rgba($color, 0.1), $background);
						}
					}
				}
			}
		}
		&.dui__table__container--bordered {
			.dui__table {
				.dui__table__cell,
				.dui__table__header {
					border: 0.0625rem solid rgba-to-rgb(rgba($color, 0.15), $background);
				}
			}
		}
	}
	@if ($background != transparent) {
		.dui__btn--loading__overlay {
			background-color: rgba($background, 0.9);
		}
	}
	@include focusVisible($background, $color);
}

@mixin pigmentColorStyles($background, $color) {
	background-color: transparent;
	color: $background;
	@if ($background == transparent) {
		color: $subFont;
	}
	&.dui__btn--focus-ring {
		&:focus {
			box-shadow: 0 0 0 0.25rem rgba($background, 0.5), 0 0 0 0.1rem rgba($color, 0.25);
		}
	}
	&.dui__btn:hover,
	&.dui__badge:hover,
	&.dui__alert:hover,
	&.filled,
	&.dui__btn--active {
		background-color: rgba($background, 0.1);
	}
	.dui__btn--loading__overlay {
		background-color: rgba($background, 0.1);
	}
	&.dui__spinner,
	&.dui__spinner--component {
		background-color: transparent;
		border-color: rgba($background, 0.25);
		border-top-color: $background;
	}
	.dui__ripple {
		background-color: rgba($background, 0.5);
	}
	@include focusVisible($background, $color);
}

$options: $pigments;
$pigmentKeys: map-keys($options);
@each $key in $pigmentKeys {
	$name: map-deep-get($options, $key, "name");
	$bgColor: map-deep-get($options, $key, "bgColor");
	$fontColor: map-deep-get($options, $key, "fontColor");
	.pigment--#{$name} {
		@include pigmentBgStyles($bgColor, $fontColor);
	}
	.pigmentColor--#{$name} {
		@include pigmentColorStyles($bgColor, $fontColor);
	}
	.hoverPigment--#{$name} {
		&.dui__btn:hover {
			background-color: darken($bgColor, 5%) !important;
			color: $fontColor !important;
			.dui__ripple {
				background-color: rgba($fontColor, 0.5) !important;
			}
		}
	}
	.activePigment--#{$name} {
		&.dui__btn--active {
			background-color: darken($bgColor, 5%) !important;
			color: $fontColor !important;
			.dui__ripple {
				background-color: rgba($fontColor, 0.5) !important;
			}
		}
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $key in $pigmentKeys {
		$name: map-deep-get($options, $key, "name");
		$bgColor: map-deep-get($options, $key, "bgColor");
		$fontColor: map-deep-get($options, $key, "fontColor");
		.pigment--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				@include pigmentBgStyles($bgColor, $fontColor);
			}
		}
		.pigmentColor--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				@include pigmentColorStyles($bgColor, $fontColor);
			}
		}
		.hoverPigment--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				&.dui__btn:hover {
					background-color: darken($bgColor, 5%) !important;
					color: $fontColor !important;
					.dui__ripple {
						background-color: rgba($fontColor, 0.5) !important;
					}
				}
			}
		}
		.activePigment--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				&.dui__btn--active {
					background-color: darken($bgColor, 5%) !important;
					color: $fontColor !important;
					.dui__ripple {
						background-color: rgba($fontColor, 0.5) !important;
					}
				}
			}
		}
	}
}

//ELEVATIONS
@each $name, $shadow in $elevations {
	.elevation--#{$name} {
		box-shadow: $shadow;
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $name, $shadow in $elevations {
		.elevation--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				box-shadow: $shadow;
			}
		}
	}
}

//CONTAINER SIZE
@each $name, $size in $containerSizes {
	.containerSize--#{$name} {
		max-width: $size;
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $name, $size in $containerSizes {
		.containerSize--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				max-width: $size;
			}
		}
	}
}

//PORTAL SIZES
@each $name, $size in $portalSizes {
	.portalSize--#{$name} {
		max-width: $size;
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $name, $size in $portalSizes {
		.portalSize--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				max-width: $size;
			}
		}
	}
}

//DRAWER SIZES
@mixin drawerSize($name) {
	@each $sizeName, $size in $drawerSizes {
		&.drawerSize--#{$sizeName} {
			@if ($name == "left" or $name == "right") {
				max-width: $size;
			} @else {
				max-height: $size;
			}
		}
	}

	@each $breakpointName, $breakpointSize in $breakpoints {
		@each $sizeName, $size in $drawerSizes {
			&.drawerSize--#{$breakpointName}--#{$sizeName} {
				@media all and (min-width: $breakpointSize) {
					@if ($name == "left" or $name == "right") {
						max-width: $size;
					} @else {
						max-height: $size;
					}
				}
			}
		}
	}
}

//FLAVOR
@mixin flavor($name, $radius) {
	@if ($name == "flat") {
		&.dui__progressring {
			& > circle {
				stroke-linecap: unset;
			}
		}
	}
	@if ($name == "default" or $name == "rounded") {
		&.dui__progressring {
			& > circle {
				stroke-linecap: round;
			}
		}
	}
	@if ($name == "default" or $name == "flat") {
		border-radius: $radius;
		&.dui__card {
			&.dui__card--img > .dui__card__img {
				border-radius: $radius;
			}
			.dui__card__loader {
				border-radius: $radius;
			}
			&.dui__card--img {
				&.img-top {
					.dui__card__img {
						border-radius: $radius $radius 0 0;
					}
				}
				&.img-right {
					.dui__card__img {
						border-radius: 0 $radius $radius 0;
					}
				}
				&.img-bottom {
					.dui__card__img {
						border-radius: 0 0 $radius $radius;
					}
				}
				&.img-left {
					.dui__card__img {
						border-radius: $radius 0 0 $radius;
					}
				}
			}
		}
		&.dui__collapse {
			.dui__collapse__loader {
				border-radius: $radius;
			}
			.dui__collapse__toggle {
				border-radius: $radius $radius 0 0;
			}
			.dui__collapse__content {
				border-radius: 0 0 $radius $radius;
				.dui__collapse {
					&__toggle {
						border-radius: $radius;
					}
				}
			}
			&.dui__collapse--collapsed {
				.dui__collapse__toggle {
					border-radius: $radius;
				}
			}
		}
		&.dui__list__group {
			& > *:first-child {
				border-radius: $radius $radius 0 0;
				& > .dui__list__group__collapse__toggle {
					border-radius: $radius $radius 0 0;
				}
			}
			& > *:last-child {
				border-radius: 0 0 $radius $radius;
				& > .dui__list__group__collapse__toggle {
					border-radius: 0;
				}
				&.dui__list__group__collapse--collapsed {
					.dui__list__group__collapse__toggle {
						border-radius: 0 0 $radius $radius;
					}
				}
			}
			&--loading {
				& > *:nth-child(2):not(.dui__list__group__loader) {
					border-radius: $radius $radius 0 0;
				}
			}
			.dui__list__group__loader {
				border-radius: $radius;
			}
			.dui__list__group__collapse {
				&::before {
					border-radius: $radius;
				}
				&__content {
					.dui__list__group__collapse {
						&__toggle {
							border-radius: $radius;
						}
					}
				}
			}
		}
		&.dui__table__container {
			.dui__table {
				&__head,
				&__foot {
					.dui__table__row {
						.dui__table__header {
							&:first-child {
								border-radius: $radius 0 0 $radius;
							}

							&:last-child {
								border-radius: 0 $radius $radius 0;
							}
						}
					}
				}
				&__body {
					.dui__table__row {
						.dui__table__cell {
							&:first-child {
								border-radius: $radius 0 0 $radius;
							}
							&:last-child {
								border-radius: 0 $radius $radius 0;
							}
						}
					}
				}
			}
			&--bordered {
				.dui__table {
					&__head {
						.dui__table__row {
							.dui__table__header {
								&:first-child {
									border-radius: $radius 0 0 0;
								}

								&:last-child {
									border-radius: 0 $radius 0 0;
								}
							}
						}
					}

					&__foot {
						.dui__table__row {
							.dui__table__header {
								&:first-child {
									border-radius: 0 0 0 $radius;
								}

								&:last-child {
									border-radius: 0 0 $radius 0;
								}
							}
						}
					}

					&__body {
						.dui__table__row {
							.dui__table__cell {
								&:first-child {
									border-radius: 0;
								}
								&:last-child {
									border-radius: 0;
								}
							}
						}
					}
				}
			}
		}
		&.dui__tabs {
			.dui__dragscroll__container {
				border-radius: $radius $radius 0 0;
				&__indicator {
					border-radius: $radius $radius 0 0;
				}
			}
			&.dui__tabs--vertical {
				.dui__dragscroll__container {
					&__indicator {
						border-radius: $radius 0 0 $radius;
					}
				}
			}
			.dui__tabs__items {
				&__indicator {
					border-radius: $radius;
				}
			}
		}
	}
	border-radius: $radius;
	&.dui__btn-group {
		& > *:first-child {
			border-radius: $radius 0 0 $radius;
		}
		& > *:last-child {
			border-radius: 0 $radius $radius 0;
		}

		&.dui__btn-group--vertical {
			& > *:first-child {
				border-radius: $radius $radius 0 0;
			}
			& > *:last-child {
				border-radius: 0 0 $radius $radius;
			}
		}
	}
	&.dui__progressbar {
		border-radius: 0;
		.dui__progressbar__progress {
			border-radius: $radius;
			&::before {
				border-radius: $radius;
			}
		}
		.dui__progressbar__label {
			border-radius: $radius;
		}
	}
	&.dui__input {
		&__wrapper {
			border-radius: $radius;
		}
		@if ($name != "flat") {
			&[type="color"] {
				&::-moz-color-swatch {
					border-radius: $radius / 2;
				}
				&::-webkit-color-swatch {
					border-radius: $radius / 2;
				}
			}
		} @else {
			&[type="color"] {
				&::-moz-color-swatch {
					border-radius: $radius;
				}
				&::-webkit-color-swatch {
					border-radius: $radius;
				}
			}
			&.dui__input__checkbox {
				.dui__input__checkbox__value {
					border-radius: $radius;
				}
			}
			&.dui__input__switch {
				.dui__input__switch__value {
					border-radius: $radius * 5;
					&::after {
						border-radius: $radius;
					}
				}
			}
			&__wrapper {
				.dui__input__switch__value {
					border-radius: $radius;
					&:after {
						border-radius: $radius;
					}
				}
				.dui__input__checkbox__value {
					border-radius: $radius;
				}
			}
		}

		&-group {
			& > * {
				border-radius: 0;
				border-right: 0.0625rem solid rgba($subFont, 0.1);
			}
			& > *:first-child {
				border-radius: $radius 0 0 $radius;
			}
			& > *:last-child {
				border-radius: 0 $radius $radius 0;
				border-right: none;
			}
		}
	}
	&.dui__switch__group {
		.dui__switch__group__indicator {
			@if ($name == "default") {
				border-radius: $radius / 2;
			} @else {
				border-radius: $radius;
			}
		}
		.dui__switch__group__item {
			&__value {
				@if ($name == "default") {
					border-radius: $radius / 2;
				} @else {
					border-radius: $radius;
				}
			}
		}
	}
	&.dui__tooltip--seamless {
		border-radius: unset;
	}
}

@each $name, $radius in $flavors {
	.flavor--#{$name} {
		@include flavor($name, $radius);
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $name, $radius in $flavors {
		.flavor--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				@include flavor($name, $radius);
			}
		}
	}
}

//SIZE
@mixin btnSpecificSize($size) {
	&.dui__btn {
		@each $name, $radius in $flavors {
			&.flavor--#{$name} {
				padding: $size * 0.4375 $size;
			}
		}

		@each $breakpointName, $breakpointSize in $breakpoints {
			@each $name, $radius in $flavors {
				&.flavor--#{$breakpointName}--#{$name} {
					@media all and (min-width: $breakpointSize) {
						padding: $size * 0.4375 $size;
					}
				}
			}
		}
	}
}

@mixin size($size) {
	font-size: $size;
	&.dui__badge {
		font-size: $size * 0.75;
	}
	&.dui__breadcrumbs {
		padding: $size * 0.75 $size;

		.dui__breadcrumbs__item {
			& > span {
				margin: 0 $size / 2;
			}
		}
	}
	&.dui__input {
		& > * {
			font-size: $size;
		}
		padding: calc(#{$size} * 0.4375) 0;
		text-indent: $size / 1.25;

		&[type="color"] {
			padding: calc(#{$size} * 0.4375 * 2.715) 0;
			&::-moz-color-swatch {
				@include colorSwatchStyles($size);
				@include mozColorSwatchDimensions($size);
			}
			&::-webkit-color-swatch {
				@include colorSwatchStyles($size);
			}
		}

		&.dui__input[type="date"],
		&.dui__input[type="time"] {
			text-indent: $size / 2.5;
		}

		@-moz-document url-prefix() {
			&.dui__input[type="file"],
			&.dui__input__select {
				text-indent: $size / 2.5;
			}
			&.dui__input[type="date"],
			&.dui__input[type="time"] {
				text-indent: $size / 1.25;
			}
		}

		&[type="range"] {
			padding: calc(#{$size} * 1.1875) $size / 1.25;
		}

		&.dui__input__textarea {
			text-indent: calc(#{$size} * 0.4375);
			padding: calc(#{$size} * 0.4375);
		}

		&.dui__input__checkable {
			padding: calc(#{$size} * 0.4375) $size / 1.25;
			&.dui__input--seamless {
				padding: calc(#{$size} * 0.4375) 0;
			}
		}
		&__wrapper {
			& > * {
				font-size: $size;
			}

			.dui__input__wrapper__attachment {
				padding: calc(#{$size} * 0.4375 - 0.015em) 0.3125em;
				&:last-child,
				&:not(&:first-child) {
					padding-right: $size / 1.25;
				}
				&.dui__input__wrapper__preffix {
					padding-left: $size / 1.25;
					padding-right: 0;
				}
				&.dui__input__wrapper__clear {
					& > span {
						margin-right: $size / 2;
					}
				}
				&.dui__input__wrapper__loader {
					padding: 0;
				}
			}

			&.dui__input__wrapper__checkable {
				.dui__input__checkable__value {
					margin-left: $size / 1.25;
				}
				.dui__input__checkable {
					padding: calc(#{$size} * 0.4375) 0;
				}
			}
		}
		&__textarea {
			text-indent: calc(#{$size} * 0.4375);
			padding: calc(#{$size} * 0.4375);
		}
		&__checkable {
			padding: calc(#{$size} * 0.4375) $size / 1.25;
		}
		&--seamless {
			&.dui__input__checkable {
				padding: calc(#{$size} * 0.4375) 0;
			}
		}
	}
	&.dui__switch__group {
		.dui__switch__group__item {
			&__value {
				padding: calc(#{$size} * 0.25) $size / 1.5;
				font-size: $size;
			}
		}
		&.dui__switch__group--seamless {
			.dui__switch__group__item {
				&__value {
					padding: calc(#{$size} * 0.4375) $size;
				}
			}
		}
	}
	&.dui__spinner {
		$calcSize: calc(calc(#{$size} * 1.375) + #{$size});
		width: $calcSize;
		height: $calcSize;
		border-width: calc(#{$calcSize} * 0.15);
	}
	&.dui__tooltip {
		font-size: $size * 0.9;
		padding: $size * 0.625 $size;
		&.dui__tooltip--seamless {
			font-size: unset;
			padding: unset;
			line-height: unset;
		}
	}
}

@each $name, $size in $sizes {
	.sizing--#{$name} {
		@include size($size);
		@include btnSpecificSize($size);
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $name, $size in $sizes {
		.sizing--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				@include size($size);
				@include btnSpecificSize($size);
			}
		}
	}
}

//UTIL
@each $name, $option in $flexAlignOptions {
	.align--#{$name} {
		align-items: $option;
	}
}
@each $name, $option in $flexJustifyOptions {
	.justify--#{$name} {
		justify-content: $option;
	}
}
@each $name, $option in $flexDirectionOptions {
	.direction--#{$name} {
		flex-direction: $option;
	}
}
@each $name, $option in $flexWrapOptions {
	.wrap--#{$name} {
		flex-wrap: $option;
	}
}

@each $breakpointName, $breakpointSize in $breakpoints {
	@each $name, $option in $flexAlignOptions {
		.align--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				align-items: $option;
			}
		}
	}
	@each $name, $option in $flexJustifyOptions {
		.justify--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				justify-content: $option;
			}
		}
	}
	@each $name, $option in $flexDirectionOptions {
		.direction--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				flex-direction: $option;
			}
		}
	}
	@each $name, $option in $flexWrapOptions {
		.wrap--#{$breakpointName}--#{$name} {
			@media all and (min-width: $breakpointSize) {
				flex-wrap: $option;
			}
		}
	}
}
