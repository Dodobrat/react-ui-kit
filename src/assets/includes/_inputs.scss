@import "./input_helpers";

@mixin input() {
	position: relative;
	display: block;
	transition: $fastTrans;
	caret-color: $mainFont;
	background-color: darken($bgCard, 7.5%);
	line-height: 1.5;
	padding: calc(#{$mdFont} * 0.4375) 0;
	text-indent: $mdFont / 1.25;
	width: 100%;
	color: $mainFont;
	border: none;
	font-size: $mdFont;
	border-radius: $smBorderRadius;
	@include crossBrowser(appearance, none);

	&:disabled {
		background-color: darken($bgCard, 12.5%);
	}

	&:hover {
		box-shadow: 0 0 0 0.0625rem rgba($subFont, 0.2);
	}

	&:focus {
		outline: none;
	}

	@include focusVisible();

	&[type="color"] {
		padding: calc(#{$mdFont} * 0.4375 * 2.715) 0;
		&::-moz-color-swatch {
			@include colorSwatchStyles();
			@include mozColorSwatchDimensions();
		}

		&::-webkit-color-swatch {
			@include colorSwatchStyles();
		}
	}

	&[type="date"],
	&[type="time"] {
		text-indent: $mdFont / 2.5;
		&::-webkit-calendar-picker-indicator {
			opacity: 0;
			padding-right: $mdFont / 1.25;
		}
	}

	@-moz-document url-prefix() {
		&[type="file"] {
			text-indent: $mdFont / 2.5;
		}
		&[type="date"],
		&[type="time"] {
			text-indent: $mdFont / 1.25;
		}
	}

	&[type="range"] {
		margin: auto 0;
		padding: calc(#{$mdFont} * 1.1875) $mdFont / 2.5;
		width: 100%;
		height: 1em;
		&:hover {
			@include rangeHover();
		}
		&:focus-visible {
			@include rangeFocusVisible();
		}
		&:disabled {
			cursor: not-allowed;
		}

		@include rangeDefaults();
	}
}

@mixin inputWrapper() {
	transition: $fastTrans;
	position: relative;
	display: flex;
	width: 100%;
	background-color: darken($bgCard, 7.5%);
	border-radius: $smBorderRadius;
	.dui__input {
		background-color: transparent;
		&:hover {
			box-shadow: none;
		}
		&:focus-visible {
			box-shadow: none;
		}
	}
	&:focus {
		outline: none;
	}
	&:hover {
		box-shadow: 0 0 0 0.0625rem rgba($subFont, 0.2);
	}
	&--focused {
		@include focusVisibleStyles();
		&:hover {
			@include focusVisibleStyles();
		}
	}
}

@mixin inputPigmentOptions($options: $pigments) {
	$pigmentKeys: map-keys($options);
	@each $key in $pigmentKeys {
		$name: map-deep-get($options, $key, "name");
		$bgColor: map-deep-get($options, $key, "bgColor");
		$fontColor: map-deep-get($options, $key, "fontColor");
		&.dui__input--#{$name} {
			&:hover {
				box-shadow: 0 0 0 0.0625rem rgba($bgColor, 0.2);
			}
			@include focusVisible($bgColor, $bgColor);
			&[type="range"] {
				&:hover {
					@include rangeHover($bgColor);
				}
				&:focus-visible {
					@include rangeFocusVisible($bgColor, $bgColor);
				}
				@include rangeThumbPigments($bgColor, darken($bgColor, 10%));
			}
			&.dui__input__checkbox {
				.dui__input__checkbox__input:checked + .dui__input__checkbox__value {
					background-color: $bgColor;
					border-color: $bgColor;
					&::after {
						border-color: $fontColor;
					}
				}
				@include csPigmentStates($bgColor);
			}
			&.dui__input__switch {
				.dui__input__switch__input:checked + .dui__input__switch__value {
					background-color: $bgColor;
					border-color: $bgColor;
					&::after {
						background-color: $fontColor;
					}
				}
				@include csPigmentStates($bgColor);
			}
		}
	}
}

@mixin inputWrapperPigmentOptions($options: $pigments) {
	$pigmentKeys: map-keys($options);
	@each $key in $pigmentKeys {
		$name: map-deep-get($options, $key, "name");
		$bgColor: map-deep-get($options, $key, "bgColor");
		$fontColor: map-deep-get($options, $key, "fontColor");
		&.dui__input__wrapper--#{$name} {
			&:hover {
				box-shadow: 0 0 0 0.0625rem rgba($bgColor, 0.2);
			}
			&.dui__input__wrapper--focused {
				@include focusVisibleStyles($bgColor, $bgColor);
				&:hover {
					@include focusVisibleStyles($bgColor, $bgColor);
				}
				&.dui__input__wrapper--seamless {
					box-shadow: none;
					&.dui__input__wrapper:hover,
					&.dui__input__wrapper:focus,
					&.dui__input__wrapper:focus-visible {
						box-shadow: none;
					}
				}
			}
			&.dui__input__wrapper--checkbox {
				&.dui__input__wrapper {
					@include csInputWrapperPigmentState("checkbox", $bgColor);
					.dui__input__checkbox__input:checked + .dui__input__checkbox__value {
						background-color: $bgColor;
						border-color: $bgColor;
						&::after {
							border-color: $fontColor;
						}
					}
				}
			}
			&.dui__input__wrapper--switch {
				&.dui__input__wrapper {
					@include csInputWrapperPigmentState("switch", $bgColor);
					.dui__input__switch__input:checked + .dui__input__switch__value {
						background-color: $bgColor;
						border-color: $bgColor;
						&::after {
							background-color: $fontColor;
						}
					}
				}
			}
		}
	}
}

@mixin inputGroupCornerRoudness($radius: $smBorderRadius) {
	border-radius: $radius;
	& > * {
		border-right: 0.0625rem solid rgba($subFont, 0.1);
	}
	& > *:first-child {
		border-radius: $radius 0 0 $radius;
	}
	& > *:last-child {
		border-radius: 0 $radius $radius 0;
		border-right: none;
	}
}

.dui__input {
	@include input();
	@each $name, $size in $sizes {
		&.dui__input--#{$name} {
			font-size: $size;
			& > * {
				font-size: $size;
			}
			padding: calc(#{$size} * 0.4375) 0;
			text-indent: $size / 1.25;

			&[type="color"] {
				padding: calc(#{$size} * 0.4375 * 2.715) 0;
				&::-moz-color-swatch {
					@include colorSwatchPosition($size);
					@include mozColorSwatchDimensions($size);
				}
				&::-webkit-color-swatch {
					@include colorSwatchPosition($size);
				}
			}

			&.dui__input[type="date"],
			&.dui__input[type="time"] {
				text-indent: $size / 2.5;
				&::-webkit-calendar-picker-indicator {
					padding-right: $size / 1.25;
				}
			}

			@-moz-document url-prefix() {
				&.dui__input[type="file"] {
					text-indent: $size / 2.5;
				}
				&.dui__input[type="date"],
				&.dui__input[type="time"] {
					text-indent: $size / 1.25;
				}
			}

			&[type="range"] {
				padding: calc(#{$size} * 1.1875) $size / 2.5;
			}

			&.dui__input__textarea {
				text-indent: calc(#{$size} * 0.4375);
				padding: calc(#{$size} * 0.4375);
			}

			&.dui__input__checkbox,
			&.dui__input__switch {
				padding: calc(#{$size} * 0.4375) $size / 1.25;
				&.dui__input--seamless {
					padding: calc(#{$size} * 0.4375) 0;
				}
			}
		}
	}
	@include inputPigmentOptions();
	&--rounded {
		border-radius: $roundedBorderRadius;
		&.dui__input[type="color"] {
			&::-moz-color-swatch {
				border-radius: $roundedBorderRadius / 2;
			}
			&::-webkit-color-swatch {
				border-radius: $roundedBorderRadius / 2;
			}
		}
	}

	&--flat {
		border-radius: $flatBorderRadius;
		&.dui__input[type="color"] {
			&::-moz-color-swatch {
				border-radius: $flatBorderRadius;
			}
			&::-webkit-color-swatch {
				border-radius: $flatBorderRadius;
			}
		}
		&.dui__input__checkbox {
			.dui__input__checkbox__value {
				border-radius: $flatBorderRadius;
			}
		}
		&.dui__input__switch {
			.dui__input__switch__value {
				border-radius: $flatBorderRadius;
				&:after {
					border-radius: $flatBorderRadius;
				}
			}
		}
	}

	&--seamless {
		background-color: transparent;
		border-radius: 0;
		&.dui__input:hover,
		&.dui__input:focus,
		&.dui__input:focus-visible {
			box-shadow: none;
		}
		&.dui__input__checkbox,
		&.dui__input__switch {
			padding: calc(#{$mdFont} * 0.4375) 0;
		}
	}

	&__wrapper {
		@include inputWrapper();
		@each $name, $size in $sizes {
			&.dui__input__wrapper--#{$name} {
				font-size: $size;
				& > * {
					font-size: $size;
				}

				.dui__input__wrapper__attachment {
					padding-top: calc(#{$size} * 0.4375 - 0.015em);
					padding-bottom: calc(#{$size} * 0.4375 - 0.015em);
					&:last-child,
					&:not(&:first-child) {
						padding-right: $size / 1.25;
					}
					&.dui__input__wrapper__preffix {
						padding-left: $size / 1.25;
						padding-right: 0;
					}
					&.dui__input__wrapper__clear {
						& > span {
							margin-right: $size / 2;
						}
					}
					&.dui__input__wrapper__loader {
						padding: 0;
					}
				}

				&.dui__input__wrapper--checkbox {
					.dui__input__checkbox__value {
						margin-left: $size / 1.25;
					}
					.dui__input__checkbox {
						padding: calc(#{$size} * 0.4375) 0;
					}
				}
				&.dui__input__wrapper--switch {
					.dui__input__switch__value {
						margin-left: $size / 1.25;
					}
					.dui__input__switch {
						padding: calc(#{$size} * 0.4375) 0;
					}
				}
			}
		}
		@include inputWrapperPigmentOptions();

		&__attachment {
			&__container {
				display: flex;
				align-items: stretch;
				justify-content: flex-end;
			}
			white-space: nowrap;
			line-height: 1.5;
			opacity: 0.75;
			user-select: none;
			padding: calc(#{$mdFont} * 0.4375 - 0.015em) 0.3125rem;
			&.dui__input__wrapper__preffix {
				padding-left: $mdFont / 1.25;
				padding-right: 0;
			}
			&:last-child,
			&:not(&:first-child) {
				padding-right: $mdFont / 1.25;
			}
			&.dui__input__wrapper__loader {
				padding: 0;
			}
			&.dui__input__wrapper__clear,
			&.dui__input__wrapper__password {
				cursor: pointer;
			}
			&.dui__input__wrapper__clear {
				display: inline-flex;
				& > span {
					margin-right: $mdFont / 2;
				}
			}
			[class^="dui__icon"] {
				width: 1em;
				height: 100%;
				transform: unset;
			}
			&:hover {
				opacity: 1;
			}
		}

		&--rounded {
			border-radius: $roundedBorderRadius;
		}

		&--flat {
			border-radius: $flatBorderRadius;
			.dui__input__checkbox__value {
				border-radius: $flatBorderRadius;
			}
			.dui__input__switch__value {
				border-radius: $flatBorderRadius;
				&:after {
					border-radius: $flatBorderRadius;
				}
			}
		}

		&--seamless {
			background-color: transparent;
			border-radius: 0;
			&.dui__input__wrapper:hover,
			&.dui__input__wrapper:focus,
			&.dui__input__wrapper:focus-visible {
				box-shadow: none;
			}
		}

		&--disabled {
			cursor: not-allowed;
			background-color: darken($bgCard, 12.5%);
		}

		&--loading {
			cursor: progress;
			&-disabled {
				pointer-events: none;
			}
		}

		&--textarea {
			flex-direction: column;
		}

		&--checkbox {
			@include csInputWrapperState("checkbox");
		}

		&--switch {
			@include csInputWrapperState("switch");
		}
	}

	&-group {
		position: relative;
		display: flex;
		flex-wrap: wrap;
		align-items: stretch;
		width: 100%;
		outline: none;

		& > * {
			border-radius: 0;
			&:focus,
			&:hover {
				z-index: 2;
			}
		}

		& > [class^="dui__input"] {
			flex: 1 1 auto;
			width: 1%;
			min-width: 0;
		}

		@include inputGroupCornerRoudness();

		&--rounded {
			@include inputGroupCornerRoudness($roundedBorderRadius);
		}
		&--flat {
			@include inputGroupCornerRoudness($flatBorderRadius);
		}
	}

	&__textarea {
		text-indent: calc(#{$mdFont} * 0.4375);
		padding: calc(#{$mdFont} * 0.4375);
		min-height: 10em;
	}

	&__checkbox {
		@include csComponentDuplicates();
		&__input {
			& + .dui__input__checkbox__value {
				@include csInputDuplicates();
				width: 1em;
				border-radius: calc(1em / 5);
				border: 0.15em solid $subFont;
				&::after {
					@include checkboxInnerIndicator();
					transform: translate(-50%, -65%) rotate(45deg);
					width: 40%;
					height: 70%;
					border-width: 0 0.125em 0.125em 0;
				}
				&::before {
					@include checkboxInnerIndicator();
					transform: translate(-50%, -50%);
					width: 50%;
					height: 0.15em;
				}
			}
			&:checked + .dui__input__checkbox__value {
				&::after {
					opacity: 1;
					border-color: $mainFont;
				}
			}
			&:indeterminate + .dui__input__checkbox__value {
				&::before {
					opacity: 1;
				}
			}
		}
	}

	&__switch {
		@include csComponentDuplicates();
		&__input {
			& + .dui__input__switch__value {
				@include csInputDuplicates();
				width: 2em;
				border-radius: $roundedBorderRadius * 5;
				border: 0.0625em solid $subFont;
				background-color: transparent;
				&::after {
					transition: $fastTrans;
					content: "";
					position: absolute;
					top: 0.1em;
					left: 0.1em;
					height: 0.675em;
					width: 0.675em;
					border-radius: $roundBorderRadius;
					background-color: $subFont;
					box-shadow: map-get($elevations, "subtle");
				}
			}
			&:checked + .dui__input__switch__value {
				&::after {
					left: calc(100% - 0.775em);
				}
			}
			&:indeterminate + .dui__input__switch__value {
				&::after {
					left: 50%;
					transform: translateX(-50%);
				}
			}
		}
	}
	// &__radio {
	// }
}

.dui__form__control {
	position: relative;
	display: block;
	&__label {
		display: block;
		margin-bottom: 0.125rem;
		margin-left: 0.625rem;
		font-size: 0.9rem;
	}
	&__hint {
		display: block;
		margin-top: 0.125rem;
		margin-left: 0.625rem;
	}
}
